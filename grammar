% grammar rt 

  Main = TopLevel+
  TopLevel =
    | Defvar -- defvar
    | Defconst -- defconst
    | Defn -- defn
    | Defclass -- defclass
    | Import -- import

   kw<s> = s ~identTail

   Defvar = kw<"defvar"> Lval "=" Exp
   Defconst = kw<"defconst"> Lval "=" Exp
   Defn = kw<"defn"> ident Formals StatementBlock
   Defclass = kw<"defclass"> ident "{" Definit "}"
   Import = kw<"import"> ident

   StatementBlock = "{" Rec_Statement "}"

   Definit = kw<"definit"> "(" kw<"self"> ":" ident CommaFormal* ")" "{" InitStatement+ "}"

   Rec_Statement =
     | kw<"global"> ident CommaIdent* Rec_Statement? -- globals
     | IfStatement Rec_Statement? -- if
     | kw<"pass"> Rec_Statement? -- pass
     | kw<"return"> ReturnExp Rec_Statement? -- return
     | ForStatement Rec_Statement? -- for
     | WhileStatement Rec_Statement? -- while
     | TryStatement Rec_Statement? -- try
     | Assignment Rec_Statement? -- assignment
     | Lval Rec_Statement? -- call
   CommaIdent = "," ident

   InitStatement = kw<"self"> "." ident "=" Exp

   IfStatement = kw<"if"> Exp StatementBlock ElifStatement* ElseStatement?
   ElifStatement = kw<"elif"> Exp StatementBlock
   ElseStatement = kw<"else"> StatementBlock

   ForStatement = kw<"for"> ident kw<"in"> Exp StatementBlock
   WhileStatement = kw<"while"> Exp StatementBlock

   TryStatement = kw<"try"> StatementBlock ExceptBlock+
   ExceptBlock =
     | kw<"except"> Exp kw<"as"> ident StatementBlock -- as
     | kw<"except"> ident StatementBlock -- basic
   
   Assignment = 
     | Lval "+=" Exp -- pluseq
     | "[" Lval CommaLval+ "]" "=" Exp -- multiple
     | Lval "=" Exp -- single

   CommaLval = "," Lval

    ReturnExp =
      | "[" Exp CommaExp+ "]" -- multiple
      | Exp -- single

    CommaExp = "," Exp
    
    Exp =  BooleanExp

    BooleanExp =
      | BooleanExp boolOp BooleanNot -- boolop
      | BooleanNot -- basic

    BooleanNot =
      | kw<"not"> BooleanExp -- not
      | AddExp -- basic

    AddExp =
      | AddExp "+" MulExp  -- plus
      | AddExp "-" MulExp  -- minus
      | MulExp -- basic

    MulExp =
      | MulExp "*" ExpExp  -- times
      | MulExp "/" ExpExp  -- divide
      | ExpExp -- basic

    ExpExp =
      | Primary "^" ExpExp  -- power
      | Primary -- basic

    Primary =
      | Primary "@" Primary -- lookup
      | Primary "." Primary Actuals -- methodcall
      | Primary "." Primary -- field
      | Primary "[" Exp "]" -- index
      | Primary "[" digit+ ":" "]" -- nthslice
      | Primary Actuals -- call
      | "(" Exp ")" -- paren
      | "[" "]" -- emptylistconst
      | "[" PrimaryComma+ "]" -- listconst
      | "{" "}" -- emptydict
      | "{" PairComma+ "}" -- dict
      | "λ" LambdaFormals? ":" Exp -- lambda
      | kw<"fresh"> "(" ident ")" -- fresh
      | kw<"car"> "(" Exp ")" -- car
      | kw<"cdr"> "(" Exp ")" -- cdr
      | kw<"argvcdr"> "(" digit ")" -- nthargvcdr
      | kw<"nthargv"> "(" digit ")" -- nthargv
      | kw<"stringcdr"> "(" Exp ")" -- stringcdr
      | "+" Primary -- pos
      | "-" Primary -- neg
      | phi -- phi
      | "⊤" -- true
      | "⊥" -- false
      | kw<"range"> "(" Exp ")" -- range
      | string -- string
      | number -- number
      | ident -- ident



    PrimaryComma = Primary ","?
    PairComma = Pair ","?
    
    Lval = Exp





    keyword = (
        kw<"fresh">
      | kw<"defvar">
      | kw<"defconst">
      | kw<"defn">
      | kw<"defclass">
      | kw<"definit">
      | kw<"self">
      | kw<"useglobal">
      | kw<"pass">
      | kw<"return">
      | kw<"if">
      | kw<"elif">
      | kw<"else">
      | kw<"and">
      | kw<"or">
      | kw<"in">
      | kw<"not">
      | kw<"range">
      | kw<"while">
      | kw<"f\"">
      | kw<"f'">
      | kw<"import">
      | kw<"try">
      | kw<"except">
      | kw<"as">
      | kw<"λ">
      | kw<"car">
      | kw<"cdr">
      | kw<"stringcdr">
      | kw<"argvcdr">
      | kw<"nthargv">
      )
      
    ident  = ~keyword identHead identTail*

    identHead = ( "_" | letter )
    identTail = ( alnum | identHead )

    Formals =
      | "(" ")" -- noformals
      | "(" Formal CommaFormal* ")" -- withformals
    LambdaFormals =
      | "(" ")" -- noformals
      | "(" Formal CommaFormal* ")" -- withformals

    Formal = ident ("=" Exp)?
    CommaFormal = "," Formal
    
    Actuals = 
      | "(" ")" -- noactuals
      | "(" Actual CommaActual* ")" -- actuals

   Actual = ParamName? Exp
   CommaActual = "," Actual

   ParamName = ident "="

    number =
      | digit* "." digit+  -- fract
      | digit+             -- whole

    Pair = string ":" Exp ","?
  
  OffsetRef = "." ident


  boolOp = ("==" | "!=" | "<=" | ">=" | ">" | "<" | kw<"and"> | kw<"or"> | kw<"in">) 
  phi = "ϕ"
  string =
    | "f\"" notdq* "\"" -- fdqstring
    | "f'" notsq* "'" -- fsqstring
    | "\"" notdq* "\"" -- dqstring
    | "'" notsq* "'" -- sqstring
  notdq = ~"\"" any
  notsq = ~"'" any


  comment = "#" notnl* nl
  nl = "\n"
  notnl = ~nl any
  space += comment
