% version of 0D that uses strings only

decl ticks
  ‚Ä¢ a number, used for tracking time within the system - every atomic set of message routing (see Containers) advance 'ticks

decl gensymbol (s) -> name
  ‚Ä¢ returns a unique name based on the prefix 's' on every invocation, names are created by suffixing 's' by a unique unicode subscript number on each invocation

decl template Datum  
  ‚Ä¢ Datum is the payload of Messages 
  ‚Ä¢ template that has at least 4 fields
    ‚Ä¢ 's'      	   the string making up the payload data
    ‚Ä¢ ùúå 'clone'	   a method that returns a deep clone of the Datum
    ‚Ä¢ ùúå 'reclaim'	   a method that discards the Datum and all of its data (essentially not needed in a Garbage Collected environment)
    ‚Ä¢ 'other'	   an object reserved for use by programmers on a per-project basis
  ‚Ä¢ instantiated by the syntax "fresh (Datum, e)" where 'e' becomes the value of the 'v' field

decl ‚ù≤fresh datum string‚ù≥ (s)
  ‚Ä¢ convenience function that returns a fresh string Datum with parameter 's' in the vield 's'

decl ‚ù≤fresh datum bang‚ù≥
  ‚Ä¢ convenience function that returns a fresh bang Datum, with 'v' set to the string "!"
  ‚Ä¢ bang is a dataless Datum that is used only to trigger events

decl Port
  ‚Ä¢ string used as an identifier for Message Ports
  ‚Ä¢ ùúå ‚ù≤clone port‚ù≥ (p)
    ‚Ä¢ a convenience function that returns a deep copy of the given port
    ‚Ä¢ this returns a string-copy of p
    ‚Ä¢ used only by Message for cloning - warn if used elsewhere

decl template Message
  ‚Ä¢ a 2-field object
    ‚Ä¢ 'port'		a Port
    ‚Ä¢ 'payload' 	a Datum
  ‚Ä¢ instantiated by the syntax "fresh (Message, p, e)" where 'p' is a Port and 'e' is a Datum

decl template Connector
  ‚Ä¢ a 3-field object
    ‚Ä¢ 'direction'		one of {"down" | "across" | "up" | "through"}
    ‚Ä¢ 'sender'			pair { Component, Port }
    ‚Ä¢ 'receiver'		pair { Component, Port }
  ‚Ä¢ abstract, never instantiated directly

  ‚Ä¢ decl subtemplate Down
    ‚Ä¢ a 3-field object
      ‚Ä¢ 'direction'		"down"
      ‚Ä¢ 'sender'		pair { Component, Port }
      ‚Ä¢ 'receiver'		pair { Component, Port }
    ‚Ä¢ instantiated by "fresh (Down, { Component, Port }, { Component, Port })"

  ‚Ä¢ decl subtemplate Across
    ‚Ä¢ a 3-field object
      ‚Ä¢ 'direction'		"across"
      ‚Ä¢ 'sender'		pair { Component, Port }
      ‚Ä¢ 'receiver'		pair { Component, Port }
    ‚Ä¢ instantiated by "fresh (Across, { Component, Port }, { Component, Port })"

  ‚Ä¢ decl subtemplate Up
    ‚Ä¢ a 3-field object
      ‚Ä¢ 'direction'		"up"
      ‚Ä¢ 'sender'		pair { Component, Port }
      ‚Ä¢ 'receiver'		pair { Component, Port }
    ‚Ä¢ instantiated by "fresh (Up, { Component, Port }, { Component, Port })"

  ‚Ä¢ decl subtemplate Through
    ‚Ä¢ a 3-field object
      ‚Ä¢ 'direction'		"through"
      ‚Ä¢ 'sender'		pair { Component, Port }
      ‚Ä¢ 'receiver'		pair { Component, Port }
    ‚Ä¢ instantiated by "fresh (Through, { Component, Port }, { Component, Port })"

decl template Eh
  ‚Ä¢ Eh is a software component
  ‚Ä¢ 'inq'		a queue of incoming Messages
  ‚Ä¢ 'outq'		a queue of outgoing Messages

  ‚Ä¢ template Eh is abstract, never instantiated directly
  
  ‚Ä¢
  

  decl subtemplate Leaf
    ‚Ä¢ 'handler'	   method,
      ‚Ä¢ clears 'outq', hence, 'outq' becomes empty
      ‚Ä¢ if 'inq' is not empty, this method pops the first message from the front of 'inq' and calls 'code' with three arguments, self, output, and the popped message
      ‚Ä¢ if 'inq' is empty, this method does nothing more and returns, leaving 'outq' empty
    ‚Ä¢ 'code'	   external method that takes 3 arguments self, output and a message to be processed
    ‚Ä¢ Leaf is instantiated by "fresh (Leaf, lang, code-name)"
      ‚Ä¢ where lang is a string containing the name of the underlying programming language which implements processing code for this Leaf
      ‚Ä¢ where code-name is the name of an accessible function implemented in the underlying programming language
        ‚Ä¢ where the named function takes 3 arguments - self, [output, ‚ù≤mark active‚ù≥, ‚ù≤mark idle‚ù≥, ‚ù≤fresh Port‚ù≥, ‚ù≤fresh Datum‚ù≥, ‚ù≤fresh ‚ù≤String Datum‚ù≥‚ù≥], message
         ‚Ä¢ output is a method, callable from the underlying programming language, which appends an output message onto the back of 'outq'
         ‚Ä¢ output takes 3 arguments, self, a Port, a Datum
         ‚Ä¢ the second argument is a form of dependency injection which supplies a list of exactly three functions to the external method 'code'
	 ‚Ä¢ ‚ù≤mark active‚ù≥ is a method that takes one argument - self - and marks the Leaf as needing more time (being active and requiring more ticks)
	 ‚Ä¢ ‚ù≤mark idle‚ù≥ is a method that takes one argument - self - and marks the Leaf as being quiescent - the default - this method is used mostly to unmark a previously active Leaf
	 ‚Ä¢ ‚ù≤fresh Port‚ù≥ is a method that takes two arguments - self and a string name of a Port - the method returns a handle to a newly-created Port
	 ‚Ä¢ ‚ù≤fresh Datum‚ù≥ is a method that takes two arguments - self and an array of bytes - the method returns a handle to a newly-created Datum
	 ‚Ä¢ ‚ù≤fresh ‚ù≤String Datum‚ù≥‚ù≥ is a method that takes two arguments - self and a string - the method returns a handle to a newly-created Datum

  decl subtemplate Container
    ‚Ä¢ 'handler'	   method,
      ‚Ä¢ first, this method clears 'outq', hence, 'outq' becomes empty
      ‚Ä¢ then, if 'inq' is not empty, this method pops the first message from the front of 'inq' and calls the private method ‚ù≤container handler‚ù≥ with two arguments, self, and the popped message
      ‚Ä¢ else, if 'inq' is empty, this method does nothing more and returns, leaving 'outq' empty
    ‚Ä¢ 'children'	a list of child components that belong to this given Container
    ‚Ä¢ 'connections'	a list of connections between children (and self)
    ‚Ä¢ ùúå '‚ù≤container handler‚ù≥'		private method that handles incoming messages by invoking "ùúå route", takes 2 parameters self and the popped message
    ‚Ä¢ ùúå 'route'				private method that handles routes message internally using the 'connections' list, takes 2 parameters self and a message, first increments system variable "tick"
    ‚Ä¢ Œª '‚ù≤any child ready‚ù≥' -> bool	private function that returns true if any direct child is ready (i.e. contains a non-empty inq, or, is marked active)
    ‚Ä¢ ùúå '‚ù≤step children‚ù≥'		private method that runs every child for one step (a "tick")
    ‚Ä¢ ùúå '‚ù≤step child‚ù≥' -> [‚ù≤began long run‚ù≥, ‚ù≤continued long run‚ù≥, ‚ù≤ended long run‚ù≥]	private method, takes 3 parameters self, child, message
