% grammar rt 

  Main = TopLevel+
  TopLevel =
    | Defvar -- defvar
    | Defconst -- defconst
    | Defn -- defn
    | Defobj -- defobj
    | Import -- import

   kw<s> = s ~identTail

   Defvar = kw<"defvar"> Lval "⇐" Exp
   Defconst = kw<"defconst"> Lval "≡" Exp
   Defn = kw<"defn"> ident Formals StatementBlock
   Defobj = kw<"defobj"> ident ObjFormals "{" InitStatement+ "}"
   Import = kw<"import"> ident

   StatementBlock = "{" Rec_Statement "}"

   Rec_Statement =
     | Deftemp -- deftemp
     | Defsynonym -- defsynonym     
     | kw<"global"> ident CommaIdent* Rec_Statement? -- globals
     | IfStatement  -- if
     | kw<"pass"> Rec_Statement? -- pass
     | kw<"return"> ReturnExp -- return
     | ForStatement -- for
     | WhileStatement  -- while
     | TryStatement -- try
     | Assignment -- assignment
     | Lval Rec_Statement? -- call
   CommaIdent = "," ident

   Deftemp = kw<"deftemp"> Lval "⇐" Exp Rec_Statement?
   Defsynonym = Lval "≡" Exp Rec_Statement?

   InitStatement = "•" ident "⇐" Exp

   IfStatement = kw<"if"> Exp StatementBlock ElifStatement* ElseStatement? Rec_Statement?
   ElifStatement = kw<"elif"> Exp StatementBlock
   ElseStatement = kw<"else"> StatementBlock

   ForStatement = kw<"for"> ident kw<"in"> Exp StatementBlock Rec_Statement?
   WhileStatement = kw<"while"> Exp StatementBlock Rec_Statement?

   TryStatement = kw<"try"> StatementBlock ExceptBlock+ Rec_Statement?
   ExceptBlock =
     | kw<"except"> Exp kw<"as"> ident StatementBlock -- as
     | kw<"except"> ident StatementBlock -- basic
   
   Assignment = 
     | "[" Lval CommaLval+ "]" "⇐" Exp Rec_Statement? -- multiple
     | Lval "⇐" Exp Rec_Statement? -- single

   CommaLval = "," Lval

    ReturnExp =
      | "[" Exp CommaExp+ "]" Rec_Statement? -- multiple
      | Exp Rec_Statement? -- single

    CommaExp = "," Exp
    
    Exp =  BooleanExp

    BooleanExp =
      | BooleanExp boolNeq BooleanNot -- boolopneq
      | BooleanExp boolOp BooleanNot -- boolop
      | BooleanNot -- basic

    BooleanNot =
      | kw<"not"> BooleanExp -- not
      | AddExp -- basic

    AddExp =
      | AddExp "+" MulExp  -- plus
      | AddExp "-" MulExp  -- minus
      | MulExp -- basic

    MulExp =
      | MulExp "*" ExpExp  -- times
      | MulExp "/" ExpExp  -- divide
      | ExpExp -- basic

    ExpExp =
      | Primary "^" ExpExp  -- power
      | Primary -- basic

    Primary =
      | Primary "@" ident -- lookupident
      | Primary "@" Primary -- lookup
      | Primary "." ident -- field
      | Primary "[" Exp "]" -- index
      | Primary "[" digit+ ":" "]" -- nthslice
      | ident Actuals -- identcall
      | Primary Actuals -- call
      | Atom -- atom

    Atom =
      | "[" "]" -- emptylistconst
      | "{" "}" -- emptydict
      | "(" Exp ")" -- paren
      | "[" PrimaryComma+ "]" -- listconst
      | "{" PairComma+ "}" -- dict
      | "λ" LambdaFormals? ":" Exp -- lambda
      | kw<"fresh"> "(" ident ")" -- fresh
      | kw<"car"> "(" Exp ")" -- car
      | kw<"cdr"> "(" Exp ")" -- cdr
      | kw<"argvcdr"> "(" digit ")" -- nthargvcdr
      | kw<"nthargv"> "(" digit ")" -- nthargv
      | kw<"stringcdr"> "(" Exp ")" -- stringcdr
      | kw<"strcons"> "(" Exp "," Exp ")" -- strcons
      | "+" Primary -- pos
      | "-" Primary -- neg
      | phi -- phi
      | "⊤" -- true
      | "⊥" -- false
      | kw<"range"> "(" Exp ")" -- range
      | string -- string
      | number -- number
      | ident -- ident



    PrimaryComma = Primary ","?
    PairComma = Pair ","?
    
    Lval = Exp





    keyword = (
        kw<"fresh">
      | kw<"defconst">
      | kw<"deftemp">
      | kw<"defobj">
      | kw<"defvar">
      | kw<"defn">
      | "•"
      | kw<"useglobal">
      | kw<"pass">
      | kw<"return">
      | kw<"if">
      | kw<"elif">
      | kw<"else">
      | kw<"and">
      | kw<"or">
      | kw<"in">
      | kw<"not">
      | kw<"range">
      | kw<"while">
      | kw<"f\"">
      | kw<"f'">
      | kw<"import">
      | kw<"try">
      | kw<"except">
      | kw<"as">
      | kw<"λ">
      | kw<"car">
      | kw<"cdr">
      | kw<"stringcdr">
      | kw<"argvcdr">
      | kw<"nthargv">
      | kw<"strcons">
      )
      
    ident  = ~keyword identHead identTail*

    identHead = ( "_" | letter )
    identTail = ( alnum | identHead )

    Formals =
      | "(" ")" -- noformals
      | "(" Formal CommaFormal* ")" -- withformals
    ObjFormals =
      | "(" ")" -- noformals
      | "(" Formal CommaFormal* ")" -- withformals
    LambdaFormals =
      | "(" ")" -- noformals
      | "(" Formal CommaFormal* ")" -- withformals

    Formal = 
       | ident "∷" Exp -- defaultvalue
       | ident -- plain
       
    CommaFormal = "," Formal
    
    Actuals = 
      | "(" ")" -- noactuals
      | "(" Actual CommaActual* ")" -- actuals

   Actual = ParamName? Exp
   CommaActual = "," Actual

   ParamName = ident "∷"

    number =
      | digit* "." digit+  -- fract
      | digit+             -- whole

    Pair = string ":" Exp ","?
  

  boolOp = (boolEq | boolNeq | "<=" | ">=" | ">" | "<" | kw<"and"> | kw<"or"> | kw<"in">)
  boolEq = "="
  boolNeq = "!="

  phi = "ϕ"
  string =
    | "f\"" notdq* "\"" -- fdqstring
    | "f'" notsq* "'" -- fsqstring
    | "\"" notdq* "\"" -- dqstring
    | "'" notsq* "'" -- sqstring
  notdq = ~"\"" any
  notsq = ~"'" any


  comment = "#" notnl* nl
  nl = "\n"
  notnl = ~nl any
  space += comment
% rewrite

Main [ TopLevel+] = ‛«TopLevel»’

TopLevel_defvar [ Defvar] =‛«Defvar»’
TopLevel_defconst [ Defconst] =‛«Defconst»’
TopLevel_defn [ Defn] =‛«Defn»’
TopLevel_defobj [ Defobj] =‛«Defobj»’
TopLevel_import [ Import] =‛«Import»’
kw [ s] = ‛«s»’
Defvar [ __ lval _eq e] = ‛\n«lval» = «e»’
Defconst [ __ lval _eq e] = ‛\n«lval» = «e»’
Defn [ _4 ident Formals StatementBlock] = ‛\ndef «ident» «Formals»:«StatementBlock»’
Defobj [ _defobj ident Formals lb init+ rb] = ‛\nclass «ident»:⤷\ndef __init__ (self«Formals»):⤷«init»⤶⤶\n’
Import [ _10 ident] = ‛\nimport «ident»’
StatementBlock [ _11 Statement _12] = ‛⤷«Statement»⤶\n’

Rec_Statement_globals [ _24 ident1  cidents* scope?] =‛\nglobal «ident1»«cidents»«scope»’
CommaIdent [_comma ident] = ‛, «ident»’
Rec_Statement_if [ IfStatement] =‛«IfStatement»’
Rec_Statement_pass [ _27 scope?] =‛\npass«scope»’
Rec_Statement_return [ _29 ReturnExp] =‛\nreturn «ReturnExp»’
Rec_Statement_for [ ForStatement] =‛«ForStatement»’
Rec_Statement_while [ WhileStatement] =‛«WhileStatement»’
Rec_Statement_try [ TryStatement] =‛«TryStatement»’
Rec_Statement_assignment [ Assignment] =‛«Assignment»’
Rec_Statement_call [ Lval scope?] =‛\n«Lval»«scope»’

Deftemp [_deftemp lval _mutate e rec?] = ‛\n«lval» = «e»«rec»’
Defsynonym [ lval _eqv e rec?] = ‛\n«lval» = «e»«rec»’


InitStatement [ _mark ident _33 Exp] = ‛\nself.«ident» = «Exp»’
IfStatement [ _35 Exp StatementBlock ElifStatement* ElseStatement? rec?] = ‛\nif «Exp»:«StatementBlock»«ElifStatement»«ElseStatement»«rec»’
ElifStatement [ _37 Exp StatementBlock] = ‛elif «Exp»:«StatementBlock»’
ElseStatement [ _39 StatementBlock] = ‛else:«StatementBlock»’
ForStatement [ _41 ident _43 Exp StatementBlock rec?] = ‛\nfor «ident» in «Exp»:«StatementBlock»«rec»’
WhileStatement [ _45 Exp StatementBlock rec?] = ‛\nwhile «Exp»:«StatementBlock»«rec»’
TryStatement [ _47 StatementBlock ExceptBlock+ rec?] = ‛\ntry:\n«StatementBlock»«ExceptBlock»«rec»’

ExceptBlock_as [ _49 Exp _51 ident StatementBlock] =‛except «Exp» as «ident»:«StatementBlock»’
ExceptBlock_basic [ _53 ident StatementBlock] =‛except «ident»:«StatementBlock»’

Assignment_multiple [ _55 Lval1  Lval2+ _57 _58 Exp rec?] =‛\n[«Lval1»«Lval2»] = «Exp»«rec»’
Assignment_single [ Lval _59 Exp rec?] =‛\n«Lval» = «Exp»«rec»’
CommaLval [_comma Lval] = ‛, «Lval»’

ReturnExp_multiple [ _60 Exp1 Exp2+ _62 rec?] =‛[«Exp1»«Exp2»]«rec»’
ReturnExp_single [ Exp rec?] =‛«Exp»«rec»’
CommaExp [_comma e] = ‛, «e»’
Exp [ BooleanExp] = ‛«BooleanExp»’

BooleanExp_boolopneq [ BooleanExp boolOp BooleanNot] =‛«BooleanExp»«boolOp»«BooleanNot»’
BooleanExp_boolop [ BooleanExp boolOp BooleanNot] =‛«BooleanExp»«boolOp»«BooleanNot»’
BooleanExp_basic [ BooleanNot] =‛«BooleanNot»’

BooleanNot_not [ _64 BooleanExp] =‛not «BooleanExp»’
BooleanNot_basic [ AddExp] =‛«AddExp»’

AddExp_plus [ AddExp _65 MulExp] =‛«AddExp»«_65»«MulExp»’
AddExp_minus [ AddExp _66 MulExp] =‛«AddExp»«_66»«MulExp»’
AddExp_basic [ MulExp] =‛«MulExp»’

MulExp_times [ MulExp _67 ExpExp] =‛«MulExp»«_67»«ExpExp»’
MulExp_divide [ MulExp _68 ExpExp] =‛«MulExp»«_68»«ExpExp»’
MulExp_basic [ ExpExp] =‛«ExpExp»’

ExpExp_power [ Primary _69 ExpExp] =‛«Primary»«_69»«ExpExp»’
ExpExp_basic [ Primary] =‛«Primary»’

Primary_lookupident [p _at key] = ‛«p» ["«key»"]’
Primary_lookup [p _at key] = ‛«p» [«key»]’
Primary_field [p _dot key] = ‛«p».«key»’ 
Primary_index [p lb e rb] = ‛«p» [«e»]’ 
Primary_nthslice [p lb ds+ _colon rb] = ‛«p» [«ds»:]’
Primary_identcall [id actuals] = ‛«id» «actuals»’
Primary_call [p actuals] = ‛«p» «actuals»’
Primary_atom [a] = ‛«a»’



Atom_emptylistconst [ _72 _73] =‛«_72»«_73»’
Atom_emptydict [ _76 _77] =‛«_76»«_77»’
Atom_paren [ _70 Exp _71] =‛«_70»«Exp»«_71»’
Atom_listconst [ _74 PrimaryComma+ _75] =‛«_74»«PrimaryComma»«_75»’
Atom_dict [ _78 PairComma+ _79] =‛«_78»«PairComma»«_79»’
Atom_lambda [ _80 Formals? _81 Exp] =‛ lambda «Formals»: «Exp»’
Atom_fresh [ _83 _84 ident _85] =‛ «ident» ()’
Atom_car [ _83 _84 e _85 ] =‛ «e»[0] ’
Atom_cdr [ _83 _84 e _85 ] =‛ «e»[1:] ’
Atom_nthargvcdr [ _83 lb n rb ] =‛ sys.argv[«n»:] ’
Atom_nthargv [ _83 _84 n _85 ] =‛ sys.argv[«n»] ’
Atom_stringcdr [ _83 _84 e _85 ] =‛ «e»[1:] ’
Atom_strcons [ _strcons lp e1 _comma e2 rp] =‛ str(«e1») + «e2» ’
Atom_pos [ _86 Primary ] =‛ +«Primary»’
Atom_neg [ _87 Primary ] =‛ -«Primary»’
Atom_phi [ phi] =‛ None’
Atom_true [ _88] =‛ True’
Atom_false [ _89] =‛ False’
Atom_range [ _91 _92 Exp _93] =‛«_91»«_92»«Exp»«_93»’
Atom_string [ string] =‛«string»’
Atom_number [ number] =‛«number»’
Atom_ident [ ident ] =‛«ident»’

PrimaryComma [ Primary _94?] = ‛«Primary»«_94»’
PairComma [ Pair _95?] = ‛«Pair»«_95»’
Lval [ Exp ] = ‛«Exp»’
keyword [ _144] = ‛«_144»’
ident [ identHead identTail*] = ‛«identHead»«identTail»’
identHead [ _146] = ‛«_146»’
identTail [ _147] = ‛«_147»’

Formals_noformals [ _148 _149] =‛«_148»«_149»’
Formals_withformals [ _150 Formal CommaFormal* _151] =‛«_150»«Formal»«CommaFormal»«_151»’
ObjFormals_noformals [ _148 _149] =‛’
ObjFormals_withformals [ _150 Formal CommaFormal* _151] =‛,«Formal»«CommaFormal»’
LambdaFormals_noformals [ _148 _149] =‛’
LambdaFormals_withformals [ _150 Formal CommaFormal* _151] =‛«Formal»«CommaFormal»’
Formal_defaultvalue [ ident  _152 Exp] = ‛«ident»=«Exp»’
Formal_plain [ ident] = ‛«ident»’
CommaFormal [ _153 Formal] = ‛«_153»«Formal»’

Actuals_noactuals [ _154 _155] =‛«_154»«_155»’
Actuals_actuals [ _156 Actual CommaActual* _157] =‛«_156»«Actual»«CommaActual»«_157»’
Actual [ ParamName? Exp] = ‛«ParamName»«Exp»’
CommaActual [ _158 Actual] = ‛«_158»«Actual»’
ParamName [ ident _159] = ‛«ident»=’

number_fract [ num* _160 den+] =‛«num»«_160»«den»’
number_whole [ digit+] =‛«digit»’
Pair [ string _161 Exp _162?] = ‛«string»«_161»«Exp»«_162»’

boolOp [ _191] = ‛ «_191» ’
boolEq [op] = ‛==’
boolNeq [op] = ‛!=’
phi [ _192] = ‛ None’

string_fdqstring [ _193 notdq* _194] =‛«_193»«notdq»«_194»’
string_fsqstring [ _195 notsq* _196] =‛«_195»«notsq»«_196»’
string_dqstring [ _197 notdq* _198] =‛«_197»«notdq»«_198»’
string_sqstring [ _199 notsq* _200] =‛«_199»«notsq»«_200»’
notdq [ any] = ‛«any»’
notsq [ any] = ‛«any»’
comment [ _203 notnl* nl] = ‛«_203»«notnl»«nl»’
nl [ _204] = ‛«_204»’
notnl [ any] = ‛«any»’
space [ comment] = ‛«comment»’

