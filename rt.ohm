rt {
  Main = TopLevel+
  TopLevel =
    | Defvar -- defvar
    | Defn -- defn
    | Defclass -- defclass
    | Import -- import

   kw<s> = s ~identTail

   Defvar = kw<"defvar"> Assignment
   Defn = kw<"defn"> ident Formals StatementBlock
   Defclass = kw<"defclass"> ident "{" Definit "}"
   Import = kw<"import"> ident

   StatementBlock = "{" Statement+ "}"

   Definit = kw<"definit"> "(" kw<"self"> ":" ident ("," Formal)*")" "{" InitStatement+ "}"
   
   Statement =
     | kw<"global"> ident ("," ident)* -- globals
     | IfStatement -- if
     | kw<"pass"> -- pass
     | kw<"return"> ReturnExp -- return
     | ForStatement -- for
     | WhileStatement -- while
     | TryStatement -- try
     | Assignment -- assignment
     | Lval  -- call

   InitStatement = kw<"self"> "." ident "=" Exp

   IfStatement = kw<"if"> Exp StatementBlock ElifStatement* ElseStatement?
   ElifStatement = kw<"elif"> Exp StatementBlock
   ElseStatement = kw<"else"> StatementBlock

   ForStatement = kw<"for"> ident kw<"in"> Exp StatementBlock
   WhileStatement = kw<"while"> Exp StatementBlock

   TryStatement = kw<"try"> StatementBlock ExceptBlock+
   ExceptBlock =
     | kw<"except"> Exp kw<"as"> ident StatementBlock -- as
     | kw<"except"> ident StatementBlock -- basic
   
   Assignment = 
     | Lval "+=" Exp -- pluseq
     | "[" Lval ("," Lval)+ "]" "=" Exp -- multiple
     | Lval "=" Exp -- single


    ReturnExp =
      | "[" Exp ("," Exp)+ "]" -- multiple
      | Exp -- single

    Exp =  BooleanExp

    BooleanExp =
      | BooleanExp boolOp BooleanNot -- boolop
      | BooleanNot -- basic

    BooleanNot =
      | kw<"not"> BooleanExp -- not
      | AddExp -- basic

    AddExp =
      | AddExp "+" MulExp  -- plus
      | AddExp "-" MulExp  -- minus
      | MulExp -- basic

    MulExp =
      | MulExp "*" ExpExp  -- times
      | MulExp "/" ExpExp  -- divide
      | ExpExp -- basic

    ExpExp =
      | PriExp "^" ExpExp  -- power
      | PriExp -- basic

    PriExp =
      | "(" Exp ")"  -- paren
      | "[" "]" -- emptylistconst
      | "[" PriExpComma+ "]" -- listconst
      | "{" "}" -- emptydict
      | "{" PairComma+ "}" -- dict
      | "λ" Formals? ":" Exp -- lambda
      | kw<"fresh"> "(" ident ")" -- fresh
      | "+" PriExp   -- pos
      | "-" PriExp   -- neg
      | phi -- phi
      | "⊤" -- true
      | "⊥" -- false
      | kw<"range"> "(" Exp ")" -- range
      | string -- string
      | number -- number
      | ident PrimaryTail -- identwithtail
      | ident -- ident

    PriExpComma = PriExp ","?
    PairComma = Pair ","?
    
    Lval = Exp PrimaryTail?


    keyword = (
        kw<"fresh">
      | kw<"defvar">
      | kw<"defn">
      | kw<"defclass">
      | kw<"definit">
      | kw<"self">
      | kw<"useglobal">
      | kw<"pass">
      | kw<"return">
      | kw<"if">
      | kw<"elif">
      | kw<"else">
      | kw<"and">
      | kw<"or">
      | kw<"in">
      | kw<"not">
      | kw<"range">
      | kw<"while">
      | kw<"f\"">
      | kw<"f'">
      | kw<"import">
      | kw<"try">
      | kw<"except">
      | kw<"as">
      )
      
    ident  = ~keyword identHead identTail*

    identHead = ( "_" | letter )
    identTail = ( alnum | identHead )

    Formals =
      | "(" ")" -- noformals
      | "(" Formal CommaFormal* ")" -- withformals

    Formal = ident ("=" Exp)?
    CommaFormal = "," Formal
    
    Actuals = 
      | "(" ")" -- noactuals
      | "(" Actual CommaActual* ")" -- actuals

   Actual = ParamName? Exp
   CommaActual = "," Actual

   ParamName = ident "="

    number =
      | digit* "." digit+  -- fract
      | digit+             -- whole

    Pair = string ":" Exp ","?

  PrimaryTail =
    | MethodCall PrimaryTail? -- methodcall
    | OffsetRef PrimaryTail? -- offsetref
    | FieldLookup PrimaryTail? -- lookup
    | Slice PrimaryTail? -- slice

  MethodCall = Actuals
  
  OffsetRef = "." ident

  FieldLookup =
    | "[" "0" "]" -- slicefirst
    | "[" Exp "]" -- lookup

  Slice =
    | "[" ":" "]" -- slicewhole
    | "[" "1" ":" "]" -- slicerest
    | "[" digit+ ":" "]" -- nthslice

  boolOp = ("==" | "!=" | "<=" | ">=" | ">" | "<" | kw<"and"> | kw<"or"> | kw<"in">) 
  phi = "ϕ"
  string =
    | "f\"" notdq* "\"" -- fdqstring
    | "f'" notsq* "'" -- fsqstring
    | "\"" notdq* "\"" -- dqstring
    | "'" notsq* "'" -- sqstring
  notdq = ~"\"" any
  notsq = ~"'" any


  comment = "#" notnl* nl
  nl = "\n"
  notnl = ~nl any
  space += comment

}