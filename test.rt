defn clone_datum_bang (d) {
    return new_datum_bang ()
}
defobj Message (port, datum) {
        • port ⇐ port
        • datum ⇐ datum
}

defn clone_port (s) {
    return clone_string (s)
}

⌈ Utility for making a `Message`. Used to safely “seed“ messages⌉
⌈ entering the very top of a network.⌉
defn make_message (port, datum) {
    p ≡ clone_string (port)
    m ≡ Message (port ∷ p, datum ∷ datum.clone ())
    return m
}

defn xyz () {
  if x {
    a ⇐ 1
  } elif y {
    a ⇐ 2
  } else {
    a ⇐ 3
  }
}

defn low_level_read_text_file_instantiate (reg, owner, name, template_data) {
    name_with_id ≡ gensym(“Low Level Read Text File”)
    return make_leaf (name_with_id, owner, ϕ, low_level_read_text_file_handler)
}

defn low_level_read_text_file_handler (eh, msg) {
    fname ≡ msg.datum.srepr ()
    # low_level_read_text_file_handler (eh, msg, fname, “”, “✗”)
}

defn read_and_convert_json_file (filename) {
    # read_and_convert_json_file (filename)
}
