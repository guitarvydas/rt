% grammar remphi

main = pattern+

pattern =
  | applySyntactic<Defnwithphi> -- withphi
  | any -- default

Defnwithphi = "defn " ident "(" stuff* ")"

stuff =
  | "⇐ϕ" -- eqphi
  | "(" stuff* ")" -- nested
  | ~")" any -- default
  
ident = ~"defn " firstc restc*
firstc = letter | "_"
restc = alnum | "_"


% rewrite
main [p+] = ‛«p»’

pattern_withphi [d] = ‛«d»’
pattern_default [x] = ‛«x»’

Defnwithphi [_defn id lp stuff* rp] = ‛defn «id» «lp»«stuff»«rp»’

stuff_eqphi [x] = ‛’
stuff_nested [lp x* rp] = ‛(«x»)’
stuff_default [x] = ‛«x»’

ident [f r*] = ‛«f»«r»’
firstc [c] = ‛«c»’
restc [c] = ‛«c»’