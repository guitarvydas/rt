;; read text from a named file «fname», send the text out on port «ok» else send error info on port «err»
;; given «eh» and «msg» if needed
(handler-bind ((error #'(lambda (condition) (send_string «eh» «err» (format nil "~&~A~&" condition)))))
  (with-open-file (stream «fname»)
    (let ((contents (make-string (file-length stream))))
      (read-sequence contents stream)
      (send_string «eh» «ok» contents))))








(defun Message (port datum)
  (list
    (cons 'port port)
    (cons 'datum datum)))

(defun clone_port (s)
  (return-from clone_port (clone_string s)))

(defun make_message (port datum)
  (let ((p (clone_string port)))
    (let ((m (Message p (funcall (assoc 'clone datum)))))
      (return-from make_message m))))

(defun xyz ()
  (cond
    (x (setf a 1))
    (y (setf a 2))
    (t (setf a 4))))
