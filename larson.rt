  

⌈ Larson Scanner components ⌉

⌈ Count ⌉
defn count_install (reg) {
    register_component (reg, Template (“Count”, ϕ, count_instantiator))
}

defvar counter ⇐ 0
defvar direction ⇐ 1

defn count_handler (eh, msg) {
    global counter, direction
    if msg.port = “adv” {
        counter ⇐ counter + direction
        send_int (eh, “”, counter, msg)
    } elif msg.port = “rev” {
        direction ⇐ direction * -1
    }
}

defn count_instantiator (reg, owner, name, template_data) {
    name_with_id ≡ gensymbol (“Count”)
    return make_leaf (name_with_id, owner, ϕ, count_handler)
}

⌈ decode ⌉
defn decode_install (reg) {
    register_component (reg, Template (“Decode”, ϕ, decode_instantiator))
}

defvar decode_digits ⇐ [“0”, “1”, “2”, “3”, “4”, “5”, “6”, “7”, “8”, “9”]
defn decode_handler (eh, msg) {
    global decode_digits
    i ⇐ int (msg.datum.raw ())
    if i >= 0 and i <= 9 {
        send_string (eh, decode_digits[i], decode_digits[i], msg)
    }
    send_bang (eh, “done”, msg)
}

defn decode_instantiator (reg, owner, name, template_data) {
    name_with_id ≡ gensymbol (“Decode”)
    return make_leaf (name_with_id, owner, ϕ, decode_handler)
}

⌈ reverser ⌉
defn reverser_install (reg) {
    register_component (reg, Template (“Reverser”, ϕ, reverser_instantiator))
}

defvar reverser_state ⇐ “J”

defn reverser_handler (eh, msg) {
    global reverser_state
    if reverser_state = “K” {
        if msg.port = “J” {
            send_bang (eh, “”, msg)
            reverser_state ⇐ “J”
        } else {
            pass
	}
    } elif reverser_state = “J” {
        if msg.port = “K” {
            send_bang (eh, “”, msg)
            reverser_state ⇐ “K”
        } else {
            pass
        }
    }
}

defn reverser_instantiator (reg, owner, name, template_data) {
    name_with_id ≡ gensymbol (“Reverser”)
    return make_leaf (name_with_id, owner, ϕ, reverser_handler)
}

⌈ delay ⌉
defn delay_install (reg) {
    register_component (reg, Template (“Delay”, None, reverser_instantiator))
}
                           
defobj Delay_Info () {
    • counter ⇐ ϕ
    • saved_message ⇐ ϕ
}
   
defn delay_instantiator (reg, owner, name, template_data) {
    name_with_id ≡ gensymbol (“delay”)
    info ≡ Delay_Info ()
    return make_leaf (name_with_id, owner, info, delay_handler)
}

defvar DELAYDELAY ⇐ 50000

defn first_time (m) {
    return not is_tick (m)
}

defn delay_handler (eh, msg) {
    info ≡ eh.instance_data
    if first_time (msg) {
        info.saved_message ⇐ msg
        set_active (eh) ⌈ tell engine to keep running this component with 'ticks' ⌉
    }
    
    count ≡ info.counter
    counter ≡ count.counter + 1
    if count >= DELAYDELAY {
        set_idle (eh) ⌈ tell engine that we're finally done ⌉
        forward (eh, “”, info.saved_message)
        count ⇐ 0
    }
    info.counter ⇐ count
}


⌈ monitor ⌉
defn monitor_install (reg) {
    register_component (reg, Template (“@”, ϕ, monitor_instantiator))
}

defn monitor_instantiator (reg, owner, name, template_data) {      
    name_with_id ≡ gensymbol (“@”)
    return make_leaf (name_with_id, owner, ϕ, monitor_handler)
}

defn monitor_handler (eh, msg) {
    s ⇐ msg.datum.srepr ()
    i ⇐ int (s)
    while i > 0 {
        s ⇐ #strcons (“ ”, s)
        i ⇐ i - 1
    }
    print (s)
}
