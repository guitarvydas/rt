defn install (reg) {
    register_component (reg, Template (“Delay”, None, instantiator))
}
                           
defobj Delay_Info () {
    • counter ⇐ ϕ
    • saved_message ⇐ ϕ
}
   
defn instantiator (reg, owner, name, template_data) {
    name_with_id ≡ gensymbol (“delay”)
    info ≡ Delay_Info ()
    return make_leaf (name_with_id, owner, info, handler)
}

defvar DELAYDELAY ⇐ 50000

defn first_time (m) {
    return not is_tick (m)
}

defn handler (eh, msg) {
    info ≡ eh.instance_data
    if first_time (msg) {
        info.saved_message ⇐ msg
        set_active (eh) ⌈ tell engine to keep running this component with 'ticks' ⌉
    }
    
    count ≡ info.counter
    counter ≡ count.counter + 1
    if count >= DELAYDELAY {
        set_idle (eh) ⌈ tell engine that we're finally done ⌉
        forward (eh, “”, info.saved_message)
        count ⇐ 0
    }
    info.counter ⇐ count
}

