#preamble ()

defvar counter ⇐ 0

defvar digits ⇐ [
    “₀”, “₁”, “₂”, “₃”, “₄”, “₅”,
    “₆”, “₇”, “₈”, “₉”,
    “₁₀”, “₁₁”, “₁₂”, “₁₃”, “₁₄”,
    “₁₅”, “₁₆”, “₁₇”, “₁₈”, “₁₉”,
    “₂₀”, “₂₁”, “₂₂”, “₂₃”, “₂₄”,
    “₂₅”, “₂₆”, “₂₇”, “₂₈”, “₂₉”
]

defn gensymbol (s) {
    global counter
    name_with_id ≡ #strcons (s, subscripted_digit (counter))
    counter ⇐ counter + 1
    return name_with_id
}

defn subscripted_digit (n) {
  global digits
  if (n >=  0 and n <=  29) {
    return digits [n]
  } else {
    return #strcons (“₊”, n)
  }
}

defobj Datum () {
      • v ⇐ ϕ
      • clone ⇐ ϕ
      • reclaim ⇐ ϕ
      • other ⇐ ϕ ⌈ reserved for use on per-project basis ⌉
}

defn new_datum_string (s) {
    d ≡ #fresh (Datum)
    d.v ⇐ s
    d.clone ⇐ λ: clone_datum_string (d)
    d.reclaim ⇐ λ: reclaim_datum_string (d)    
    return d
}

defn clone_datum_string (d) {
  newd ≡ new_datum_string (d.v)
  return newd
}

defn reclaim_datum_string (src) {
  pass
}

defn new_datum_bang () {
    p ≡ #fresh (Datum)
    p.v ⇐ “”
    p.clone ⇐ λ: clone_datum_bang (p)
    p.reclaim ⇐ λ: reclaim_datum_bang (p)
    return p
}

defn clone_datum_bang (d) {
    return new_datum_bang ()
}

defn reclaim_datum_bang (d) {
    pass
}

⌈ Message passed to a leaf component.⌉
⌈⌉
⌈ `port` refers to the name of the incoming or outgoing port of this component.⌉
⌈ `datum` is the data attached to this message.⌉
defobj Message () {
        • port ⇐ ϕ
        • datum ⇐ ϕ
}

defn clone_port (s) {
    return clone_string (s)
}

⌈ Utility for making a `Message`. Used to safely “seed“ messages⌉
⌈ entering the very top of a network.⌉
defn make_message (port, datum) {
    p ≡ clone_string (port)
    deftemp m ⇐ #fresh (Message)
    m.port ⇐ p
    m.datum ⇐ datum.clone ()
    return m
}

⌈ Clones a message. Primarily used internally for “fanning out“ a message to multiple destinations.⌉
defn message_clone (msg) {
    deftemp m ⇐ #fresh (Message)
    m.port ⇐ clone_port (msg.port)
    m.datum ⇐ msg.datum.clone ()
    return m
}

⌈ Frees a message.⌉
defn destroy_message (msg) {
    ⌈ during debug, dont destroy any message, since we want to trace messages, thus, we need to persist ancestor messages⌉
    pass
}

defn destroy_datum (msg) {
    pass
}

defn destroy_port (msg) {
    pass
}

⌈⌉
defn format_message (m) {
    if m = ϕ {
        return #strcons (“\“”, #strcons (m.port, #strcons (“\”:\“”, #strcons (“ϕ”, “\”,”))))
    } else {
        return #strcons (“\“”, #strcons (m.port, #strcons (“\”:\“”, #strcons (m.datum.v, “\”,”))))
    }
}

defconst enumDown ≡ 0
defconst enumAcross ≡ 1
defconst enumUp ≡ 2
defconst enumThrough ≡ 3

defn create_down_connector (container, proto_conn, connectors, children_by_id) {
⌈ JSON: {'dir': 0, 'source': {'name': '', 'id': 0}, 'source_port': '', 'target': {'name': 'Echo', 'id': 12}, 'target_port': ''},⌉
    deftemp connector ⇐ #fresh (Connector)
    connector.direction ⇐ “down”
    connector.sender ⇐ mkSender (container.name, container, proto_conn@“source_port”)
    target_proto ≡ proto_conn@“target”
    id_proto ≡ target_proto@“id”
    target_component ≡ children_by_id@id_proto
    if (target_component = ϕ) {
	load_error (#strcons (“internal error: .Down connection target internal error ”, (proto_conn@“target”)@“name”))}
    else{
	connector.receiver ⇐ mkReceiver (target_component.name, target_component, proto_conn@“target_port”, target_component.inq)
    }
    return connector
}

defn create_across_connector (container, proto_conn, connectors, children_by_id) {
    deftemp connector ⇐ #fresh (Connector)
    connector.direction ⇐ “across”
    source_component ≡ children_by_id@((proto_conn@“source”)@“id”)
    target_component ≡ children_by_id@((proto_conn@“target”)@“id”)
    if source_component = ϕ {
	load_error (#strcons (“internal error: .Across connection source not ok ”, (proto_conn@“source”)@“name”))
    } else {
	connector.sender ⇐ mkSender (source_component.name, source_component, proto_conn@“source_port”)
	if target_component = ϕ {
	    load_error (#strcons (“internal error: .Across connection target not ok ”, (proto_conn@“target”)@“name”))
	} else {
	    connector.receiver ⇐ mkReceiver (target_component.name, target_component, proto_conn@“target_port”, target_component.inq)
	}
     }
    return connector
}

defn create_up_connector (container, proto_conn, connectors, children_by_id) {
    deftemp connector ⇐ #fresh (Connector)
    connector.direction ⇐ “up”
    source_component ≡ children_by_id@((proto_conn@“source”)@“id”)
    if source_component = ϕ {
	print (#strcons (“internal error: .Up connection source not ok ”, (proto_conn@“source”)@“name”)) }
    else {
	connector.sender ⇐ mkSender (source_component.name, source_component, proto_conn@“source_port”)
	connector.receiver ⇐ mkReceiver (container.name, container, proto_conn@“target_port”, container.outq)
    }
    return connector
}

defn create_through_connector (container, proto_conn, connectors, children_by_id) {
    deftemp connector ⇐ #fresh (Connector)
    connector.direction ⇐ “through”
    connector.sender ⇐ mkSender (container.name, container, proto_conn@“source_port”)
    connector.receiver ⇐ mkReceiver (container.name, container, proto_conn@“target_port”, container.outq)
    return connector
}


defn container_instantiator (reg, owner, container_name, desc) {
    global enumDown, enumUp, enumAcross, enumThrough
    container ≡ make_container (container_name, owner)
    children ≡ []
    children_by_id ≡ {} ⌈ not strictly necessary, but, we can remove 1 runtime lookup by “compiling it out“ here⌉
    ⌈ collect children⌉
    for child_desc in desc@“children” {
        child_instance ≡ get_component_instance (reg, child_desc@“name”, container)
        #append (children, child_instance)
	id ≡ child_desc@“id”
        children_by_id@id ⇐ child_instance

    }
    container.children ⇐ children
    
    connectors ≡ []
    for proto_conn in desc@“connections” {
        deftemp connector ⇐ #fresh (Connector)
        if proto_conn@“dir” = enumDown {
	    #append (connectors, create_down_connector (container, proto_conn, connectors, children_by_id))
        } elif proto_conn@“dir” = enumAcross {
	    #append (connectors, create_across_connector (container, proto_conn, connectors, children_by_id))
        } elif proto_conn@“dir” = enumUp {
	    #append (connectors, create_up_connector (container, proto_conn, connectors, children_by_id))
        } elif proto_conn@“dir” = enumThrough {
	    #append (connectors, create_through_connector (container, proto_conn, connectors, children_by_id))
	}
     }            
    container.connections ⇐ connectors
    return container
}

⌈ The default handler for container components.⌉
defn container_handler (container, message) {
    route (container, ⌈ from= ⌉container, message) ⌈ references to 'self' are replaced by the container during instantiation⌉
    while any_child_ready (container) {
        step_children (container, message)}
}

⌈ Frees the given container and associated data.⌉
defn destroy_container (eh) {
    pass
}

⌈ Routing connection for a container component. The `direction` field has⌉
⌈ no affect on the default message routing system _ it is there for debugging⌉
⌈ purposes, or for reading by other tools.⌉

defobj Connector () {
        • direction ⇐ ϕ ⌈ down, across, up, through⌉
        • sender ⇐ ϕ
        • receiver ⇐ ϕ
}

⌈ `Sender` is used to “pattern match“ which `Receiver` a message should go to,⌉
⌈ based on component ID (pointer) and port name.⌉

defobj Sender () {
        • name ⇐ ϕ
        • component ⇐ ϕ
        • port ⇐ ϕ
}



⌈ `Receiver` is a handle to a destination queue, and a `port` name to assign⌉
⌈ to incoming messages to this queue.⌉

defobj Receiver () {
        • name ⇐ ϕ
        • queue ⇐ ϕ
        • port ⇐ ϕ
        • component ⇐ ϕ
}

defn mkSender (name, component, port) {
    deftemp s ⇐ #fresh (Sender)
    s.name ⇐ name
    s.component ⇐ component
    s.port ⇐ port
    return s
}

defn mkReceiver (name, component, port, q) {
    deftemp r ⇐ #fresh (Receiver)
    r.name ⇐ name
    r.component ⇐ component
    r.port ⇐ port
    ⌈ We need a way to determine which queue to target. "Down" and "Across" go to inq, "Up" and "Through" go to outq.⌉
    r.queue ⇐ q
    return r
}

⌈ Checks if two senders match, by pointer equality and port name matching.⌉
defn sender_eq (s1, s2) {
    same_components ≡ (s1.component = s2.component)
    same_ports ≡ (s1.port = s2.port)
    return same_components and same_ports
}

⌈ Delivers the given message to the receiver of this connector.⌉

defn deposit (parent, conn, message) {
    new_message ≡ make_message (conn.receiver.port, message.datum)
    push_message (parent, conn.receiver.component, conn.receiver.queue, new_message)
}

defn force_tick (parent, eh) {
    tick_msg ≡ make_message (“.”, new_datum_bang ())
    push_message (parent, eh, eh.inq, tick_msg)
    return tick_msg
}

defn push_message (parent, receiver, inq, m) {
    #enqueue (inq, m)
    #enqueue (parent.visit_ordering, receiver)
}

defn is_self (child, container) {
    ⌈ in an earlier version “self“ was denoted as ϕ⌉
    return child = container
}

defn step_child (child, msg) {
    before_state ≡ child.state
    child.handler(child, msg)
    after_state ≡ child.state
    return [before_state = “idle” and after_state != “idle”, 
            before_state != “idle” and after_state != “idle”,
            before_state != “idle” and after_state = “idle”]
}

defn step_children (container, causingMessage) {
    container.state ⇐ “idle”
    for child in #queue2list (container.visit_ordering) {
        ⌈ child = container represents self, skip it⌉
        if (not (is_self (child, container))){
            if (not (#empty (child.inq))){
                msg ≡ #dequeue (child.inq)
		deftemp began_long_run ⇐ ϕ
		deftemp continued_long_run ⇐ ϕ
		deftemp ended_long_run ⇐ ϕ
                [began_long_run, continued_long_run, ended_long_run] ⇐ step_child (child, msg)
                if began_long_run {
                    pass
                } elif continued_long_run {
                    pass 
                } elif ended_long_run {
                    pass 
                }
                destroy_message(msg)
            } else {
                if child.state !=  “idle” {
                    msg ≡ force_tick (container, child)
                    child.handler(child, msg)
                    destroy_message(msg)
		 }
             }
            
            if child.state = “active” {
                ⌈ if child remains active, then the container must remain active and must propagate “ticks“ to child⌉
                container.state ⇐ “active”
	     }
            
            while (not (#empty (child.outq))) {
                msg ≡ #dequeue (child.outq)
                route(container, child, msg)
                destroy_message(msg)
	     }
	 }
    }
}

defn attempt_tick (parent, eh) {
    if eh.state != “idle” {
        force_tick (parent, eh)
    }
}

defn is_tick (msg) {
    return “.” = msg.port ⌈ assume that any message that is sent to port "." is a tick ⌉
}

⌈ Routes a single message to all matching destinations, according to⌉
⌈ the container's connection network.⌉

defn route (container, from_component, message) {
    deftemp was_sent ⇐ ⊥ ⌈ for checking that output went somewhere (at least during bootstrap)⌉
    deftemp fromname ⇐ “”
    if is_tick (message){
        for child in container.children {
            attempt_tick (container, child) }
        was_sent ⇐ ⊤
    } else {
        if (not (is_self (from_component, container))) {
            fromname ⇐ from_component.name
	}
        from_sender ≡ mkSender (fromname, from_component, message.port)
        
        for connector in container.connections {
            if sender_eq (from_sender, connector.sender) {
                deposit (container, connector, message)
                was_sent ⇐ ⊤
	    }
	}
    }
    if not (was_sent) {
        print (“\n\n*** Error: ***”)
        print (“***”)
        print (#strcons (container.name, #strcons (“: message '”, #strcons (message.port, #strcons (“' from ”, #strcons (fromname, “ dropped on floor...”))))))
        print (“***”)
        #abort ()
    }
}

defn any_child_ready (container) {
    for child in container.children {
        if child_is_ready(child) {
            return ⊤
	}
    }
    return ⊥
}

defn child_is_ready (eh) {
    return (not (#empty (eh.outq))) or (not (#empty (eh.inq))) or ( eh.state != “idle”) or (any_child_ready (eh))
}

defn append_routing_descriptor (container, desc) {
    #enqueue (container.routings, desc)
}

defn container_injector (container, message) {
    container_handler (container, message)
}

